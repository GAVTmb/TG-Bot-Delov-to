
import datetime

from aiogram import F, types, Router, Bot
from aiogram.filters import StateFilter, or_f
from aiogram.fsm.context import FSMContext

from sqlalchemy.ext.asyncio import AsyncSession

from keyboards import kb_admin, kb_worker
from keyboards.inline_kb import get_callback_buts

from handlers.admin_authorization import RegistrationAdmin, AddWorkingShift, ChangePassword, ADMIN_PASSWORD

from database.orm_admin_table_queries import orm_get_admin, orm_get_all_admin, orm_update_admin_access
from database.orm_worker_table_queries import orm_update_worker_access, orm_get_worker, orm_get_all_workers
from database.orm_working_shift_table_queries import (orm_add_working_shift, orm_update_working_shift,
                                                      orm_get_upcoming_working_shifts, orm_get_working_shift,
                                                      orm_get_past_work_shifts, orm_delete_working_shift)
from database.orm_work_shift_worker_table_queries import orm_get_all_work_shift_worker, orm_update_going_on_shift_approval_admin

from additional_functions import sending_new_shift_workers, generation_text_shifts_workers, sending_update_shift_workers

admin_commands_router = Router()


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–º–µ–Ω—ãüõ†"
@admin_commands_router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–º–µ–Ω—ãüõ†")
async def show_all_working_change_admin(message: types.Message, session: AsyncSession, bot: Bot):
    await message.answer(f"–ö–∞–∫–∏–µ —Å–º–µ–Ω—ã –≤–∞–º –ø–æ–∫–∞–∑–∞—Ç—å?",
                         reply_markup=get_callback_buts(buts={"‚û°–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ": f"upcomingworkshifts_",
                                                              "–ü—Ä–æ—à–µ–¥—à–∏–µ‚¨Ö": f"pastworkshifts_",},
                                                        sizes=(2,))
                         )

# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "üîé–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ"
@admin_commands_router.message(F.text == "üîé–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ")
async def view_data_admin(message: types.Message, session: AsyncSession):
    admin = await orm_get_admin(session, str(message.from_user.id))
    await message.answer(f"‚ùó –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ ‚ùó\n"
                         f"–¢–µ–ª–µ–≥–∞–º id: {admin.tg_id_admin}\n"
                         f"–ò–º—è: {admin.name}\n"
                         f"–§–∞–º–∏–ª–∏—è: {admin.surname}\n"
                         f"–ù–æ–º–µ—Ä —Ç–µ–ª-–∞: +7{admin.phone_number}",
                         reply_markup=get_callback_buts(buts={
                             "–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µüîÑ": f"changedataadmin_{str(message.from_user.id)}",},
                                   sizes=(1,))
    )

# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤‚Äçüë∑‚Äç‚ôÇÔ∏è"
@admin_commands_router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤‚Äçüë∑‚Äç‚ôÇÔ∏è")
async def view_data_worker(message: types.Message, session: AsyncSession):
    workers = await orm_get_all_workers(session)
    for worker in workers:
        await message.answer(f"{worker.name_worker} {worker.surname_worker}\n"
                             f"–ù–æ–º–µ—Ä —Ç–µ–ª-–∞: +7{worker.phone_number_worker}",
                             reply_markup=get_callback_buts(buts={"–ü–æ–¥—Ä–æ–±–Ω–µ–µüïµÔ∏è‚Äç‚ôÇÔ∏è": f"detailed_{str(worker.tg_id_worker)}",},
                                    sizes=(2,))
                             )


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
@admin_commands_router.callback_query(StateFilter(None), F.data.startswith("detailed_"))
async def detailed_view_data_worker(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    tg_id_worker = callback.data.split("_")[-1]
    worker = await orm_get_worker(session, str(tg_id_worker))
    text_message = (f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–Ω–∏–∫–µ:\n"
                    f"-–¢–µ–ª–µ–≥–∞–º id: {worker.tg_id_worker}\n"
                    f"-–ò–º—è: {worker.name_worker}\n"
                    f"-–§–∞–º–∏–ª–∏—è: {worker.surname_worker}\n"
                    f"-–í–æ–∑—Ä–∞—Å—Ç: {worker.age_worker}\n"
                    f"-–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {worker.work_experience}\n"
                    f"-–ù–æ–º–µ—Ä —Ç–µ–ª-–∞: +7{worker.phone_number_worker}\n\n")
    if worker.access_worker:
        await callback.message.edit_text(f"{text_message}"
                                         f"–†–∞–±–æ—Ç–Ω–∏–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã —Å–º–µ–Ω—ã.‚úÖ",
                                         reply_markup=get_callback_buts(buts={
                                             "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å‚ùå": f"notacceptworker_{str(worker.tg_id_worker)}",},
                                             sizes=(1,))
                                         )
    else:
        await callback.message.edit_text(f"{text_message}"
                                         f"–†–∞–±–æ—Ç–Ω–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–º–µ–Ω—ã –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã.‚ùå",
                                         reply_markup=get_callback_buts(buts={
                                             "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å‚úÖ": f"acceptworker_{str(worker.tg_id_worker)}", },
                                             sizes=(1,))
                                         )



# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ü—Ä–∏–Ω—è—Ç—å!‚úÖ
@admin_commands_router.callback_query(StateFilter(None), F.data.startswith("acceptworker_"))
async def accept_worker(callback: types.CallbackQuery, bot: Bot, session: AsyncSession):
    tg_id_worker = callback.data.split("_")[-1]
    worker = await orm_get_worker(session, str(tg_id_worker))
    await orm_update_worker_access(session, str(tg_id_worker), True)
    await bot.send_message(int(tg_id_worker), f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–º–µ–Ω–∞–º!‚úÖ",
                           reply_markup=kb_worker.kb_start_worker.as_markup(resize_keyboard=True))
    await callback.answer()
    await callback.message.edit_text(f"–†–∞–±–æ—Ç–Ω–∏–∫—É {worker.name_worker} {worker.surname_worker}\n"
                                     f"–ù–æ–º–µ—Ä —Ç–µ–ª-–∞: +7{worker.phone_number_worker}"
                                     f"\n\n–û—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–º–µ–Ω–∞–º!‚úÖ",
                                     reply_markup=get_callback_buts(buts={
                                         "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å‚ùå": f"notacceptworker_{str(worker.tg_id_worker)}", },
                                         sizes=(1,))
                                     )


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –û—Ç–∫–ª–æ–Ω–∏—Ç—å!‚ùå
@admin_commands_router.callback_query(StateFilter(None), F.data.startswith("notacceptworker_"))
async def reject_worker(callback: types.CallbackQuery, bot: Bot, session: AsyncSession):
    tg_id_worker = callback.data.split("_")[-1]
    worker = await orm_get_worker(session, str(tg_id_worker))
    await orm_update_worker_access(session, str(tg_id_worker), False)
    await bot.send_message(int(tg_id_worker), f"–î–æ—Å—Ç—É–ø –∫ —Å–º–µ–Ω–∞–º –∑–∞–∫—Ä—ã—Ç‚ùå\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É",
                           reply_markup=kb_worker.kb_contact_manager_view_worker.as_markup(resize_keyboard=True))
    await callback.answer()
    await callback.message.edit_text(f"–†–∞–±–æ—Ç–Ω–∏–∫—É {worker.name_worker} {worker.surname_worker}\n"
                                     f"–ù–æ–º–µ—Ä —Ç–µ–ª-–∞: +7{worker.phone_number_worker}"
                                     f"\n\n–ó–∞–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–º–µ–Ω–∞–º!‚ùå",
                                     reply_markup=get_callback_buts(buts={
                                         "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å‚úÖ": f"acceptworker_{str(worker.tg_id_worker)}", },
                                         sizes=(1,))
                                     )


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "‚úÖ–û–¥–æ–±—Ä–∏—Ç—å"
@admin_commands_router.callback_query(StateFilter(None), F.data.startswith("allowshift_"))
async def allow_shift_worker(callback: types.CallbackQuery, bot: Bot, session: AsyncSession):
    message_text = callback.message.text
    working_shift_id = callback.data.split("_")[-2]
    tg_id_worker = callback.data.split("_")[-1]
    working_shift = await orm_get_working_shift(session, int(working_shift_id))
    work_shift_workers = await orm_get_all_work_shift_worker(session, working_shift.id)
    if len(work_shift_workers) < working_shift.quantity_workers:
        await orm_update_going_on_shift_approval_admin(session, str(tg_id_worker), int(working_shift_id),
                                                       True, True)
        await callback.message.edit_text(f"{message_text}\n‚úÖ–û–¥–æ–±—Ä–µ–Ω–æ!")
        await bot.send_message(tg_id_worker,
                               f"–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∞—Å –æ–¥–æ–±—Ä–∏–ª‚úÖ\n"
                                f"–ñ–¥—ë–º –≤–∞—Å {working_shift.date_time_working_shift.strftime("%d.%m.20%y")} "
                                f"–≤ {working_shift.date_time_working_shift.strftime("%H:%M")}\n"
                                f"–ü–æ –∞–¥—Ä–µ—Å—É {working_shift.address}")
    else:
        await callback.message.edit_text(f"{callback.message.text}\n\n"
                                         f"‚ùó–†–∞–±–æ—Ç–Ω–∏–∫–∏ –≤ —ç—Ç—É —Å–º–µ–Ω—É —É–∂–µ –Ω–∞–±—Ä–∞–Ω—ã.‚ùó")
    await callback.answer()


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "‚ùå–û—Ç–∫–∞–∑–∞—Ç—å"
@admin_commands_router.callback_query(StateFilter(None), F.data.startswith("notallowshift_"))
async def not_allow_shift_worker(callback: types.CallbackQuery, bot: Bot, session: AsyncSession):
    working_shift_id = callback.data.split("_")[-2]
    tg_id_worker = callback.data.split("_")[-1]
    working_shift = await orm_get_working_shift(session, int(working_shift_id))
    await orm_update_going_on_shift_approval_admin(session, str(tg_id_worker), int(working_shift_id),
                                                   True, False)
    await callback.message.edit_text(f"{callback.message.text}\n‚ùå–û—Ç–∫–∞–∑–∞–Ω–æ!")
    await callback.answer()
    await bot.send_message(tg_id_worker,
                           f"‚ùå–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∞–º –æ—Ç–∫–∞–∑–∞–ª‚ùå\n{callback.message.text}")


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ". –í—ã–¥–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ä–∞–±–æ—á–∏–µ —Å–º–µ–Ω—ã.
@admin_commands_router.callback_query(StateFilter(None), F.data.startswith("upcomingworkshifts_"))
async def upcoming_work_shifts(callback: types.CallbackQuery, session: AsyncSession):
    for upcoming_work_shift in await orm_get_upcoming_working_shifts(session):
        admin = await orm_get_admin(session, str(upcoming_work_shift.tg_id_admin))
        text = await generation_text_shifts_workers(upcoming_work_shift)
        await callback.message.answer(f"‚û°–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–º–µ–Ω—ã\n"
                                      f"–°–º–µ–Ω—É —Å–æ–∑–¥–∞–ª(–∞): {admin.name} {admin.surname}\n‚òé+7{admin.phone_number}\n"
                                      f"{text}",
                                      reply_markup=get_callback_buts(buts={
                                          "–ò–∑–º–µ–Ω–∏—Ç—å —Å–º–µ–Ω—ÉüîÑ": f"changeshift_{upcoming_work_shift.id}",
                                          "–£–¥–∞–ª–∏—Ç—å —Å–º–µ–Ω—Éüóë": f"deleteshift_{upcoming_work_shift.id}",
                                          "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —Å–º–µ–Ω—ãüë∑‚Äç‚ôÇÔ∏è": f"shiftworkers_{upcoming_work_shift.id}",},
                                          sizes=(2, 1))
                                      )
    await callback.answer()


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—à–µ–¥—à–∏–µ". –í—ã–¥–∞–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏–µ —Ä–∞–±–æ—á–∏–µ —Å–º–µ–Ω—ã.
@admin_commands_router.callback_query(StateFilter(None), F.data.startswith("pastworkshifts_"))
async def past_work_shifts(callback: types.CallbackQuery, session: AsyncSession):
    for past_work_shift in await orm_get_past_work_shifts(session):
        admin = await orm_get_admin(session, str(past_work_shift.tg_id_admin))
        text = await generation_text_shifts_workers(past_work_shift)
        await callback.message.answer(f"–ü—Ä–æ—à–µ–¥—à–∏–µ —Å–º–µ–Ω—ã‚¨Ö\n"
                                      f"–°–º–µ–Ω—É —Å–æ–∑–¥–∞–ª(–∞): {admin.name} {admin.surname}\n‚òé+7{admin.phone_number}\n"
                                      f"{text}",
                                      reply_markup=get_callback_buts(buts={
                                          "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —Å–º–µ–Ω—ãüë∑‚Äç‚ôÇÔ∏è": f"shiftworkers_{past_work_shift.id}", },
                                          sizes=(1,))
                                      )
    await callback.answer()


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —Å–º–µ–Ω—É".
@admin_commands_router.callback_query(StateFilter(None), F.data.startswith("deleteshift_"))
async def delete_work_shifts(callback: types.CallbackQuery, session: AsyncSession, bot: Bot):
    work_shift_id = int(callback.data.split("_")[-1])
    tg_id_workers_list = await orm_get_all_work_shift_worker(session, int(work_shift_id))
    await callback.answer()
    for tg_id_workers in tg_id_workers_list:
        await bot.send_message(int(tg_id_workers), f"üóë‚ùó–≠—Ç–∞ —Å–º–µ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞‚ùóüóë\n\n{callback.message.text}")
    await orm_delete_working_shift(session, work_shift_id)
    await callback.message.edit_text(f"–°–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∞!üóë")



# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —Å–º–µ–Ω—ã".
@admin_commands_router.callback_query(StateFilter(None), F.data.startswith("shiftworkers_"))
async def view_shift_workers(callback: types.CallbackQuery, session: AsyncSession):
    work_shift_id = int(callback.data.split("_")[-1])
    tg_id_workers_list = await orm_get_all_work_shift_worker(session, int(work_shift_id))
    worker_shift = await orm_get_working_shift(session, work_shift_id)
    message_text = callback.message.text
    if tg_id_workers_list:
        text_worker_list = []
        counter = 0
        ikb = None
        if worker_shift.date_time_working_shift > datetime.datetime.now():
            ikb = get_callback_buts(buts={
                                          "–ò–∑–º–µ–Ω–∏—Ç—å —Å–º–µ–Ω—ÉüîÑ": f"changeshift_{worker_shift.id}",
                                          "–£–¥–∞–ª–∏—Ç—å —Å–º–µ–Ω—Éüóë": f"deleteshift_{worker_shift.id}",},
                                          sizes=(2,))
        for tg_id_worker in tg_id_workers_list:
            counter += 1
            worker = await orm_get_worker(session, str(tg_id_worker))
            print(worker)
            text_worker = f"{counter}. {worker.name_worker} {worker.surname_worker}\n"
            text_worker_list.append(text_worker)
        await callback.message.edit_text(f"{message_text}\n\n"
                                         f"–†–∞–±–æ—Ç–Ω–∏–∫–∏ —Å–º–µ–Ω—ã!\n"
                                         f"{"".join(text_worker_list)}",
                                         reply_markup=ikb)
    else:
        await callback.message.edit_text(f"{message_text}\n\n"
                                         f"–í —ç—Ç–æ–π —Å–º–µ–Ω–µ –µ—â–µ –Ω–µ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.")
    await callback.answer()


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "‚û°–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ‚¨Ö"
@admin_commands_router.callback_query(StateFilter(None), F.data.startswith("changedataadmin_"))
async def change_data_admin(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    tg_id_admin = callback.data.split("_")[-1]
    admin = await orm_get_admin(session, str(tg_id_admin))
    RegistrationAdmin.admin_data_for_change = admin
    await state.set_state(RegistrationAdmin.name)
    await callback.answer()
    await callback.message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è.",
                                  reply_markup=kb_admin.kb_cancel_back_skip_admin.as_markup(resize_keyboard=True))


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "changeshift_"
@admin_commands_router.callback_query(StateFilter(None), F.data.startswith("changeshift_"))
async def change_shift(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    work_shift_id = callback.data.split("_")[-1]
    work_shift = await orm_get_working_shift(session, int(work_shift_id))
    AddWorkingShift.shift_for_working_change = work_shift
    await state.set_state(AddWorkingShift.date_time_working_shift)
    await callback.answer()
    await callback.message.answer("–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É üìÜ –∏ –≤—Ä–µ–º—è‚åö\n–í —Ñ–æ—Ä–º–∞—Ç–µ 01.01.25 10:00",
                                  reply_markup=kb_admin.kb_cancel_back_skip_admin.as_markup(resize_keyboard=True))


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤".
@admin_commands_router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–¥–∏–Ω-–≤")
async def view_admins(message: types.Message, session: AsyncSession):
    for admin in await orm_get_all_admin(session):
        print(f"{admin.surname} {admin.name}\n —Ç.{admin.phone_number}")
        if admin.admin_access:
            await message.answer(f"{admin.name} {admin.surname}\n—Ç–µ–ª: ‚òé+7{admin.phone_number}\n–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!‚úÖ",
                                 reply_markup=get_callback_buts(buts={
                                     "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø": f"block_{admin.tg_id_admin}",
                                 }, sizes=(1,))
                                 )
        elif not admin.admin_access:
            await message.answer(f"{admin.name} {admin.surname}\n—Ç–µ–ª: ‚òé+7{admin.phone_number}\n–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!‚ùå",
                                 reply_markup=get_callback_buts(buts={
                                     "–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø": f"unblock_{admin.tg_id_admin}",
                                 }, sizes=(1,))
                                 )


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø".
@admin_commands_router.callback_query(F.data.startswith("block_"))
async def block_admin (callback: types.CallbackQuery, session: AsyncSession, bot: Bot):
    tg_id_admin = callback.data.split("_")[-1]
    admin_data = await orm_get_admin(session, str(tg_id_admin))
    data = False
    await orm_update_admin_access(session, str(tg_id_admin), data)
    await callback.answer()
    await bot.send_message(tg_id_admin, f"–í–∞–º –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –¥–æ—Å—Ç—É–ø!",
                           reply_markup=kb_admin.del_kb)
    await callback.message.edit_text(f"{admin_data.name} {admin_data.surname}\n"
                                     f"—Ç–µ–ª: ‚òé+7{admin_data.phone_number}\n–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!‚ùå",
                                     reply_markup=kb_admin.start_kb_main_admin.as_markup(resize_keyboard=True))


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø".
@admin_commands_router.callback_query(F.data.startswith("unblock_"))
async def unblock_admin (callback: types.CallbackQuery, session: AsyncSession, bot: Bot):
    tg_id_admin = callback.data.split("_")[-1]
    admin_data = await orm_get_admin(session, str(tg_id_admin))
    data = True
    await orm_update_admin_access(session, str(tg_id_admin), data)
    await callback.answer()
    await bot.send_message(tg_id_admin, f"–í–∞–º —Ä–∞–∑—Ä–µ—à–∏–ª–∏ –¥–æ—Å—Ç—É–ø!",
                           reply_markup=kb_admin.start_kb_admin.as_markup(resize_keyboard=True))
    await callback.message.edit_text(f"{admin_data.name} {admin_data.surname}\n"
                                     f"—Ç–µ–ª: ‚òé+7{admin_data.phone_number}\n–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!‚úÖ",
                                     reply_markup=kb_admin.start_kb_main_admin.as_markup(resize_keyboard=True))


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å". –í—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º FSM, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
# "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å!". –°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "new_password"
@admin_commands_router.message(StateFilter(None), F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")
async def change_password(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å!",
                         reply_markup=kb_admin.kb_cancel_admin.as_markup(resize_keyboard=True))
    await state.set_state(ChangePassword.new_password)


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "new_password". –ò–∑–º–µ–Ω—è–µ—Ç –ø–∞—Ä–æ–ª—å –Ω–∞ –Ω–æ–≤—ã–π, –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Ä–µ–∂–∏–º–∞ FSM.
# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–º–µ–Ω–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω-–∞.
@admin_commands_router.message(StateFilter(ChangePassword.new_password))
async def new_password(message: types.Message, state: FSMContext):
    new_pass = message.text
    ADMIN_PASSWORD[0] = str(new_pass)
    print(f"–ù–æ–≤—ã–π –≤–∞—Ä–æ–ª—å - {ADMIN_PASSWORD}")
    await message.answer(f"–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!",
                         reply_markup=kb_admin.start_kb_main_admin.as_markup(resize_keyboard=True))
    await state.clear()


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–º–µ–Ω—ÉüÜï". –í—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º FSM, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
# "–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É". –°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "date_time_working_shift"
@admin_commands_router.message(StateFilter(None), F.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–º–µ–Ω—ÉüÜï")
async def start_fsm_admin(message: types.Message, state: FSMContext):
    await message.answer("–î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º —Å–º–µ–Ω—É!!!\n–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É üìÜ –∏ –≤—Ä–µ–º—è‚åö\n–í —Ñ–æ—Ä–º–∞—Ç–µ 01.01.25 10:00",
                         reply_markup=kb_admin.kb_cancel_admin.as_markup(resize_keyboard=True))
    await state.set_state(AddWorkingShift.date_time_working_shift)


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤ —Ä–µ–∂–∏–º–µ "date_time_working_shift" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å üè†".
# –°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "time_shift"
@admin_commands_router.message(StateFilter(AddWorkingShift.date_time_working_shift), or_f(F.text, F.text == "_–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å_"))
async def add_date_shift_admin(message: types.Message, state: FSMContext):
    tg_id_admin = message.from_user.id
    await state.update_data(tg_id_admin=str(tg_id_admin))
    print(message.text)
    try:
        if message.text == "_–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å_":
            await state.update_data(date_working_shift=AddWorkingShift.shift_for_working_change.date_working_shift)
            await message.answer("–ù–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å üè†",
                                 reply_markup=kb_admin.kb_cancel_back_skip_admin.as_markup(resize_keyboard=True))
        else:
            result = datetime.datetime.strptime(message.text, "%d.%m.%y %H:%M")
            print(f"!!!!!{type(result)}!!!!!")
            print(result)
            await state.update_data(date_working_shift=result)
            if AddWorkingShift.shift_for_working_change is None:
                await message.answer("–ù–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å üè†",
                                     reply_markup=kb_admin.kb_cancel_back_admin.as_markup(resize_keyboard=True))
            else:
                await message.answer("–ù–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å üè†",
                                     reply_markup=kb_admin.kb_cancel_back_skip_admin.as_markup(resize_keyboard=True))
        await state.set_state(AddWorkingShift.address)
    except Exception as error:
        print(error)
        await message.answer(f"–û—à–∏–±–∫–∞:{str(error)}\n–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!\n"
                             f"–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É üìÜ –∏ –≤—Ä–µ–º—è‚åö\n–í —Ñ–æ—Ä–º–∞—Ç–µ 01.01.25 10:00")


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤ —Ä–µ–∂–∏–º–µ "address" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ!".
# –°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "description_shift"
@admin_commands_router.message(StateFilter(AddWorkingShift.address), or_f(F.text, F.text == "_–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å_"))
async def add_address_admin(message: types.Message, state: FSMContext):
    print(message.text)
    if message.text == "_–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å_":
        await state.update_data(address=AddWorkingShift.shift_for_working_change.address)
        await message.answer("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ üìù",
                             reply_markup=kb_admin.kb_cancel_back_skip_admin.as_markup(resize_keyboard=True))
    else:
        await state.update_data(address=message.text)
        if AddWorkingShift.shift_for_working_change is None:
            await message.answer("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ üìù",
                                 reply_markup=kb_admin.kb_cancel_back_admin.as_markup(resize_keyboard=True))
        else:
            await message.answer("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ üìù",
                                 reply_markup=kb_admin.kb_cancel_back_skip_admin.as_markup(resize_keyboard=True))
    await state.set_state(AddWorkingShift.description_working_shift)


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤ —Ä–µ–∂–∏–º–µ "description_working_shift" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
# "–ù–∞–ø–∏—à–∏ –∫–æ–ª-–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤!". –°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "quantity_workers"
@admin_commands_router.message(StateFilter(AddWorkingShift.description_working_shift), or_f(F.text, F.text == "_–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å_"))
async def add_description_shift_admin(message: types.Message, state: FSMContext):
    print(message.text)
    try:
        if message.text == "_–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å_":
            await state.update_data(description_working_shift=AddWorkingShift.shift_for_working_change.description_working_shift)
            await message.answer("–ù–∞–ø–∏—à–∏ –∫–æ–ª-–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤!",
                                 reply_markup=kb_admin.kb_cancel_back_skip_admin.as_markup(resize_keyboard=True))
        else:
            await state.update_data(description_working_shift=message.text)
            if AddWorkingShift.shift_for_working_change is None:
                await message.answer("–ù–∞–ø–∏—à–∏ –∫–æ–ª-–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤!",
                                     reply_markup=kb_admin.kb_cancel_back_admin.as_markup(resize_keyboard=True))
            else:
                await message.answer("–ù–∞–ø–∏—à–∏ –∫–æ–ª-–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤!",
                                     reply_markup=kb_admin.kb_cancel_back_skip_admin.as_markup(resize_keyboard=True))
        await state.set_state(AddWorkingShift.quantity_workers)
    except Exception as error:
        print(error)
        await message.answer(f"–û—à–∏–±–∫–∞:{str(error)}\n–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. "
                             f"–ù–∞–ø–∏—à–∏ –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ!",
                             reply_markup=kb_admin.kb_cancel_back_admin.as_markup(resize_keyboard=True))


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–æ–µ –≤ —Ä–µ–∂–∏–º–µ "quantity_workers" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
# "–ù–∞–ø–∏—à–∏ –∫–æ–ª-–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤!". –°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "cost_work"
@admin_commands_router.message(StateFilter(AddWorkingShift.quantity_workers), or_f(F.text, F.text == "_–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å_"))
async def add_quantity_workers_admin(message: types.Message, state: FSMContext):
    print(message.text)
    try:
        if message.text == "_–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å_":
            await state.update_data(quantity_workers=AddWorkingShift.shift_for_working_change.quantity_workers)
            await message.answer("–ù–∞–ø–∏—à–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å üí∞",
                                 reply_markup=kb_admin.kb_cancel_back_skip_admin.as_markup(resize_keyboard=True))
        else:
            quantity_workers_int = int(message.text)
            await state.update_data(quantity_workers=quantity_workers_int)
            if AddWorkingShift.shift_for_working_change is None:
                await message.answer("–ù–∞–ø–∏—à–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å üí∞",
                                     reply_markup=kb_admin.kb_cancel_back_admin.as_markup(resize_keyboard=True))
            else:
                await message.answer("–ù–∞–ø–∏—à–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å üí∞",
                                     reply_markup=kb_admin.kb_cancel_back_skip_admin.as_markup(resize_keyboard=True))
        await state.set_state(AddWorkingShift.cost_work)
    except Exception as error:
        print(error)
        await message.answer(f"–û—à–∏–±–∫–∞:{str(error)}\n–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. "
                             f"–ù–∞–ø–∏—à–∏ –∫–æ–ª-–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤!",
                             reply_markup=kb_admin.kb_cancel_back_admin.as_markup(resize_keyboard=True))


# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –ë–î.
# –ü–æ—Å–ª–µ —á–µ–≥–æ —É–¥–∞–ª—è–µ—Ç –∏–∑ –ø–∞–º—è—Ç–∏ –∏ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Ä–µ–∂–∏–º–∞ FSM.
@admin_commands_router.message(StateFilter(AddWorkingShift.cost_work), F.text)
async def add_cost_work_admin(message: types.Message, state: FSMContext, session: AsyncSession, bot: Bot):
    admin = await orm_get_admin(session, str(message.from_user.id))
    try:
        if message.text == "_–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å_":
            await state.update_data(cost_work=AddWorkingShift.shift_for_working_change.cost_work)
        else:
            cost_work_int = int(message.text)
            await state.update_data(cost_work=cost_work_int)
        data = await state.get_data()
        print(data)

        if AddWorkingShift.shift_for_working_change:
            await sending_update_shift_workers(session, bot, AddWorkingShift.shift_for_working_change)
            await orm_update_working_shift(session, AddWorkingShift.shift_for_working_change.id, data)
            if admin.admin_access:
                await message.answer("–°–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!‚úÖ",
                                     reply_markup=kb_admin.start_kb_admin.as_markup(resize_keyboard=True))
            else:
                await message.answer("–°–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!‚úÖ",
                                     reply_markup=kb_admin.start_kb_main_admin.as_markup(resize_keyboard=True))
        else:
            await orm_add_working_shift(session, data)
            await sending_new_shift_workers(session, bot)
            if admin.admin_access:
                await message.answer("–°–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!‚úÖ",
                                     reply_markup=kb_admin.start_kb_admin.as_markup(resize_keyboard=True))
            else:
                await message.answer("–°–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!‚úÖ",
                                     reply_markup=kb_admin.start_kb_main_admin.as_markup(resize_keyboard=True))
        await state.clear()
        AddWorkingShift.shift_for_working_change = None
    except Exception as error:
        await message.answer(f"–û—à–∏–±–∫–∞:\n{str(error)}\n–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. "
                             f"–ù–∞–ø–∏—à–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                             reply_markup=kb_admin.kb_cancel_back_admin.as_markup(resize_keyboard=True))


@admin_commands_router.message(F.text == "–í—ã—Ö–æ–¥")
async def exit_admin(message: types.Message):
    await message.answer("–î–æ—Å–≤–∏–¥–∞–Ω–∏—è!", reply_markup=kb_worker.kb_start.as_markup(resize_keyboard=True))

