import os
from aiogram import F, types, Router, Bot
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import LabeledPrice, PreCheckoutQuery

from sqlalchemy.ext.asyncio import AsyncSession
import datetime

from database.orm_admin_table_queries import orm_get_all_tg_id_admin
from database.orm_worker_table_queries import orm_add_worker, orm_get_worker, orm_update_worker

from keyboards import kb_worker
from keyboards.inline_kb import get_callback_buts

worker_authorization_router = Router()


class RegistrationWorker(StatesGroup):
    tg_id_worker = State()
    name_worker = State()
    surname_worker = State()
    age_worker = State()
    work_experience = State()
    phone_number_worker = State()
    passport_photo_worker = State()
    access_worker = State()

    worker_data_for_change = None

    texts_registration_worker = {
        "RegistrationWorker:name_worker": "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∑–∞–Ω–æ–≤–æ.",
        "RegistrationWorker:surname_worker": "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é –∑–∞–Ω–æ–≤–æ.",
        "RegistrationWorker:age_worker": "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç –∑–∞–Ω–æ–≤–æ.",
        "RegistrationWorker:work_experience": "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç –∑–∞–Ω–æ–≤–æ.",
        "RegistrationWorker:phone_number_worker": "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–Ω–æ–≤–æ.",
        "RegistrationWorker:passport_photo_worker": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∑–∞–Ω–æ–≤–æ.",
    }


@worker_authorization_router.message(StateFilter(None), Command("start"))
async def worker_login(message: types.Message, state: FSMContext, session: AsyncSession):
    worker = await orm_get_worker(session, str(message.from_user.id))
    if worker:
        if worker.access_worker:
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç {worker.name_worker}! –Ø –±–æ—Ç Delov-to! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                                 reply_markup=kb_worker.kb_start_worker.as_markup(resize_keyboard=True)
                                 )
        else:
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç {worker.name_worker}! –Ø –±–æ—Ç Delov-to!\n"
                                 f"–¢–µ–±–µ –∑–∞–∫—Ä—ã–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Å–º–µ–Ω–∞–º, —Å–≤—è–∂–∏—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º!",
                                 reply_markup=kb_worker.kb_contact_manager_view_worker.as_markup(resize_keyboard=True)
                                 )
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Çüëã! –Ø –±–æ—Ç Delov-to!\n"
                             "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –ò–º—è.",
                             reply_markup=kb_worker.kb_cancel_worker.as_markup(resize_keyboard=True)
                             )
        await state.set_state(RegistrationWorker.name_worker)


@worker_authorization_router.message(StateFilter("*"), Command("–û—Ç–º–µ–Ω–∞"))
@worker_authorization_router.message(StateFilter("*"), F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_handler_worker(message: types.Message, state: FSMContext, session: AsyncSession):
    current_state = await state.get_state()
    if current_state is None:
        return
    if RegistrationWorker.worker_data_for_change:
        RegistrationWorker.worker_data_for_change = None
    await state.clear()

    worker = await orm_get_worker(session, str(message.from_user.id))
    if worker:
        if worker.access_worker:
            await message.answer(f"–û—Ç–º–µ–Ω–∏–ª!", reply_markup=kb_worker.kb_start_worker.as_markup(resize_keyboard=True))
        else:
            await message.answer(f"–û—Ç–º–µ–Ω–∏–ª!",
                                 reply_markup=kb_worker.kb_contact_manager_view_worker.as_markup(resize_keyboard=True))
    else:
        await message.answer("–û—Ç–º–µ–Ω–∏–ª!", reply_markup=kb_worker.kb_start.as_markup(resize_keyboard=True))



# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥
@worker_authorization_router.message(StateFilter("*"), Command("–ù–∞–∑–∞–¥"))
@worker_authorization_router.message(StateFilter("*"), F.text == "–ù–∞–∑–∞–¥")
async def return_handler_worker(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == RegistrationWorker.name_worker:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞")
        return

    previous = None
    for step in RegistrationWorker.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f"–í–µ—Ä–Ω—É–ª –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É.\n"
                                 f"{RegistrationWorker.texts_registration_worker[previous.state]}")
            return
        previous = step


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤ —Ä–µ–∂–∏–º–µ "name_worker" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é".
# –°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "surname_worker"
@worker_authorization_router.message(StateFilter(RegistrationWorker.name_worker))
async def add_name_worker(message: types.Message, state: FSMContext):
    await state.update_data(tg_id_worker=str(message.from_user.id))
    try:
        if len(message.text) < 2:
            raise ValueError
        if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            await state.update_data(name_worker=RegistrationWorker.worker_data_for_change.name_worker)
            await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –§–∞–º–∏–ª–∏—é.",
                                 reply_markup=kb_worker.kb_cancel_back_skip_worker.as_markup(resize_keyboard=True))
        else:
            await state.update_data(name_worker=str(message.text))
            if RegistrationWorker.worker_data_for_change is None:
                await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –§–∞–º–∏–ª–∏—é.",
                                 reply_markup=kb_worker.kb_cancel_back_worker.as_markup(resize_keyboard=True))
            else:
                await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –§–∞–º–∏–ª–∏—é.",
                                     reply_markup=kb_worker.kb_cancel_back_skip_worker.as_markup(resize_keyboard=True))
        await state.set_state(RegistrationWorker.surname_worker)

    except Exception as error:
        print(error)
        await message.answer(f"–û—à–∏–±–∫–∞:{str(error)}\n–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è! –ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –ò–º—è!",
                             reply_markup=kb_worker.kb_cancel_back_worker.as_markup(resize_keyboard=True))


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤ —Ä–µ–∂–∏–º–µ "surname_worker" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç.".
# –°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "age_worker"
@worker_authorization_router.message(StateFilter(RegistrationWorker.surname_worker))
async def add_surname_worker(message: types.Message, state: FSMContext):
    try:
        if len(message.text) < 2:
            raise ValueError
        if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            await state.update_data(surname_worker=RegistrationWorker.worker_data_for_change.surname_worker)
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç.",
                                 reply_markup=kb_worker.kb_cancel_back_skip_worker.as_markup(resize_keyboard=True))
        else:
            await state.update_data(surname_worker=message.text)
            if RegistrationWorker.worker_data_for_change is None:
                await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç.",
                                     reply_markup=kb_worker.kb_cancel_back_worker.as_markup(resize_keyboard=True))
            else:
                await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç.",
                                     reply_markup=kb_worker.kb_cancel_back_skip_worker.as_markup(resize_keyboard=True))
        await state.set_state(RegistrationWorker.age_worker)

    except Exception as error:
        print(error)
        await message.answer(f"–û—à–∏–±–∫–∞:{str(error)}\n–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –§–∞–º–∏–ª–∏—é!",
                             reply_markup=kb_worker.kb_cancel_back_worker.as_markup(resize_keyboard=True))


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤ —Ä–µ–∂–∏–º–µ "age_worker" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã.".
# –°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "work_experience"
@worker_authorization_router.message(StateFilter(RegistrationWorker.age_worker))
async def add_age_worker(message: types.Message, state: FSMContext):
    try:
        if 16 > int(message.text) or int(message.text) > 80:
            raise ValueError
        if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            await state.update_data(age_worker=int(RegistrationWorker.worker_data_for_change.age_worker))
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã.",
                                 reply_markup=kb_worker.kb_cancel_back_skip_worker.as_markup(resize_keyboard=True))
        else:
            await state.update_data(age_worker=int(message.text))
            if RegistrationWorker.worker_data_for_change is None:
                await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã.",
                                     reply_markup=kb_worker.kb_cancel_back_worker.as_markup(resize_keyboard=True))
            else:
                await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã.",
                                     reply_markup=kb_worker.kb_cancel_back_skip_worker.as_markup(resize_keyboard=True))
        await state.set_state(RegistrationWorker.work_experience)

    except Exception as error:
        print(error)
        await message.answer(f"–û—à–∏–±–∫–∞:{str(error)}\n–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç!",
                             reply_markup=kb_worker.kb_cancel_back_worker.as_markup(resize_keyboard=True))


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤ —Ä–µ–∂–∏–º–µ "work_experience" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç.
# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.". –°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "phone_number_worker"
@worker_authorization_router.message(StateFilter(RegistrationWorker.work_experience))
async def add_work_experience(message: types.Message, state: FSMContext):
    try:
        if len(message.text) < 2:
            raise ValueError
        if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            await state.update_data(work_experience=str(RegistrationWorker.worker_data_for_change.work_experience))
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89001112233.",
                                 reply_markup=kb_worker.kb_cancel_back_skip_worker.as_markup(resize_keyboard=True))
        else:
            await state.update_data(work_experience=str(message.text))
            if RegistrationWorker.worker_data_for_change is None:
                await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89001112233.",
                                     reply_markup=kb_worker.kb_cancel_back_worker.as_markup(resize_keyboard=True))
            else:
                await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89001112233.",
                                     reply_markup=kb_worker.kb_cancel_back_skip_worker.as_markup(resize_keyboard=True))
        await state.set_state(RegistrationWorker.phone_number_worker)

    except Exception as error:
        print(error)
        await message.answer(f"–û—à–∏–±–∫–∞:{str(error)}\n–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã!",
                             reply_markup=kb_worker.kb_cancel_back_worker.as_markup(resize_keyboard=True))


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤ —Ä–µ–∂–∏–º–µ "phone_number_worker" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç.
# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã.". –°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "phone_number_worker"
@worker_authorization_router.message(StateFilter(RegistrationWorker.phone_number_worker))
async def add_phone_number_worker(message: types.Message, state: FSMContext):
    try:
        if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            await state.update_data(phone_number_worker=RegistrationWorker.worker_data_for_change.phone_number_worker)
            await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞.",
                                 reply_markup=kb_worker.kb_cancel_back_skip_worker.as_markup(resize_keyboard=True))
        else:
            int_phone_number = message.text
            if len(message.text) != 11:
                raise ValueError
            await state.update_data(phone_number_worker=message.text[1:])
            if RegistrationWorker.worker_data_for_change is None:
                await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞.",
                                     reply_markup=kb_worker.kb_cancel_back_worker.as_markup(resize_keyboard=True))
            else:
                await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞.",
                                     reply_markup=kb_worker.kb_cancel_back_skip_worker.as_markup(resize_keyboard=True))
        await state.set_state(RegistrationWorker.passport_photo_worker)

    except Exception as error:
        print(error)
        await message.answer(f"–û—à–∏–±–∫–∞:{str(error)}\n–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!\n"
                             f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89001112233!",
                             reply_markup=kb_worker.kb_cancel_back_worker.as_markup(resize_keyboard=True))


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤ —Ä–µ–∂–∏–º–µ "passport_photo_worker" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç.
# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–π—Ç–µ."
# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î, –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Ä–µ–∂–∏–º–∞ FSM. –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.
@worker_authorization_router.message(StateFilter(RegistrationWorker.passport_photo_worker), or_f(F.photo))
async def add_passport_photo_worker(message: types.Message, state: FSMContext, bot: Bot, session: AsyncSession):
    print(f"add_passport_photo_worker - {message.text}")
    try:
        if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            await state.update_data(passport_photo_worker=RegistrationWorker.worker_data_for_change.passport_photo_worker)
            await state.update_data(access_worker=RegistrationWorker.worker_data_for_change.access_worker)
        else:
            await state.update_data(passport_photo_worker=message.photo[-1].file_id)
            await state.update_data(access_worker=False)
        worker_data = await state.get_data()
        print(worker_data)

        if RegistrationWorker.worker_data_for_change:
            await orm_update_worker(session, RegistrationWorker.worker_data_for_change.id, worker_data)
            await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã",
                                 reply_markup=kb_worker.kb_start.as_markup(resize_keyboard=True))
        else:
            await orm_add_worker(session, worker_data)
            await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–π—Ç–µ.",
                                 reply_markup=kb_worker.kb_contact_manager_view_worker.as_markup(resize_keyboard=True))

            admin_list = await orm_get_all_tg_id_admin(session)
            if admin_list:
                for tg_id_admin in admin_list:
                    await bot.send_photo(int(tg_id_admin), worker_data["passport_photo_worker"],
                                         caption=f"–ê–Ω–∫–µ—Ç–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É:\n"
                                                 f"-–¢–µ–ª–µ–≥–∞–º id: {worker_data["tg_id_worker"]}\n"
                                                 f"-–ò–º—è: {worker_data["name_worker"]}\n"
                                                 f"-–§–∞–º–∏–ª–∏—è: {worker_data["surname_worker"]}\n"
                                                 f"-–í–æ–∑—Ä–∞—Å—Ç: {worker_data["age_worker"]}\n"
                                                 f"-–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {worker_data["work_experience"]}\n"
                                                 f"-–ù–æ–º–µ—Ä —Ç–µ–ª-–∞: +7{worker_data["phone_number_worker"]}",
                                         reply_markup=get_callback_buts(buts={"‚úÖ–ü—Ä–∏–Ω—è—Ç—å":
                                                                                  f"acceptworker_{worker_data["tg_id_worker"]}",
                                                                              "‚ùå–û—Ç–∫–ª–æ–Ω–∏—Ç—å":
                                                                                  f"notacceptworker_{worker_data["tg_id_worker"]}"},
                                                                        sizes=(2, ))
                                         )
            else:
                print("–ê–¥–º–∏–Ω–æ–≤ –Ω–µ—Ç")
        await state.clear()
        RegistrationWorker.worker_data_for_change = None
    except Exception as error:
        print(error)
        await message.answer(f"–û—à–∏–±–∫–∞:{str(error)}\n–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞!",
                             reply_markup=kb_worker.kb_contact_manager_view_worker.as_markup(resize_keyboard=True))
